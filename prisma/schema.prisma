generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  credits   Int      @default(3)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects      Project[]
  transactions  Transaction[]
  usageLogs     UsageLog[]

  @@index([clerkId])
  @@index([email])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  sourceType  String   // "upload" | "youtube"
  sourceUrl   String?
  status      String   @default("pending") // "pending" | "processing" | "completed" | "failed"
  preset      String   // "viral" | "balanced" | "volume"
  platform    String   // "tiktok" | "youtube" | "instagram" | "all"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clips Clip[]
  jobs  Job[]

  @@index([userId])
  @@index([status])
}

model Clip {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  url         String
  thumbnailUrl String?
  duration    Int      // in seconds
  viralScore  Int      @default(0) // 0-100
  status      String   @default("pending") // "pending" | "processing" | "ready" | "failed"
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([viralScore])
}

model Job {
  id          String   @id @default(cuid())
  projectId   String
  type        String   // "download" | "process" | "analyze" | "generate"
  status      String   @default("pending") // "pending" | "running" | "completed" | "failed"
  progress    Int      @default(0) // 0-100
  result      Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([type])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "purchase" | "usage" | "refund"
  amount      Int      // credits
  description String
  metadata    Json?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // "video_upload" | "clip_generate" | "ai_analysis"
  credits   Int      // credits consumed
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

